{"version":3,"sources":["../../src/decorators/param.ts"],"names":[],"mappings":";;AAMA,4BAAyB;AACzB,0CAAsC;AACtC,+DAA2D;AAC3D,yEAAqE;AACrE,kDAA0C;AAE1C,eAAuB,IAAa;IAClC,OAAO,UAAU,MAAW,EAAE,YAAoB,EAAE,KAAa;QAC/D,MAAM,GAAG,GAAG,YAAY,CAAA;QACxB,MAAM,OAAO,GACX,OAAO,CAAC,WAAW,CAAC,mBAAQ,CAAC,kBAAkB,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAA;QAC5E,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAA;QAC7C,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,IAAI,+BAAc,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,CAAA;YAC/C,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SACrB;QACD,MAAM,SAAS,GAAG,sBAAY,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;QAC3D,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CACpC,mBAAmB,EACnB,MAAM,EACN,YAAY,CACb,CAAA;QACD,MAAM,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,CAAA;QAC5C,MAAM,CAAC,MAAM,CAAC,IAAI,CAChB,IAAI,yCAAmB,CACrB,IAAI,IAAI,YAAY,EACpB,SAAS,EACT,aAAa,EACb,KAAK,CACN,CACF,CAAA;QACD,OAAO,CAAC,cAAc,CACpB,mBAAQ,CAAC,kBAAkB,EAC3B,OAAO,EACP,MAAM,CAAC,WAAW,CACnB,CAAA;IACH,CAAC,CAAA;AACH,CAAC;AA/BD,sBA+BC","file":"param.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport 'reflect-metadata'\nimport { Metadata } from '../metadata'\nimport { ActionMetadata } from '../metadata/actionMetadata'\nimport { ActionParamMetadata } from '../metadata/actionParamMetadata'\nimport functionArgs from '../functionArgs'\n\nexport function Param (name?: string) {\n  return function (target: any, propertyName: string, index: number) {\n    const key = propertyName\n    const actions: ActionMetadata[] =\n      Reflect.getMetadata(Metadata.controller_actions, target.constructor) || []\n    let action = actions.find(a => a.key === key)\n    if (!action) {\n      action = new ActionMetadata(key, '', '', 'get')\n      actions.push(action)\n    }\n    const paramName = functionArgs(target[propertyName])[index]\n    const paramTypes = Reflect.getMetadata(\n      'design:paramtypes',\n      target,\n      propertyName\n    )\n    const paramTypeName = paramTypes[index].name\n    action.params.push(\n      new ActionParamMetadata(\n        name || propertyName,\n        paramName,\n        paramTypeName,\n        index\n      )\n    )\n    Reflect.defineMetadata(\n      Metadata.controller_actions,\n      actions,\n      target.constructor\n    )\n  }\n}\n"]}