{"version":3,"sources":["../../src/metadata/controllerMetadata.ts"],"names":[],"mappings":";;AAMA,4BAAyB;AACzB,mCAAkC;AAClC,yCAAqC;AAErC,8DAA0D;AAC1D,sCAA8B;AAE9B;IAKE,YAAa,UAAe;QAC1B,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAA;SAClD;QACD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAQ,CAAC,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,CAAA;IAC5E,CAAC;IAEM,WAAW,CAAE,IAAY;QAC9B,IAAI,CAAC,kBAAkB,GAAG,IAAI,uCAAkB,CAAC,IAAI,CAAC,CAAA;IACxD,CAAC;IAEM,GAAG,CAAE,MAAsB;QAChC,IAAI,OAAO,GAAG,MAAM,CAAA;QACpB,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,OAAO,GAAG,OAAO,CAAC,MAAM,EAAE,CAAA;YAC1B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;SAC/B;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAA;QACjC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAA;YACxD,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;QAC7C,CAAC,CAAC,CAAA;IACJ,CAAC;IAEO,UAAU;QAChB,OAAO,CACL,OAAO,CAAC,WAAW,CAAC,mBAAQ,CAAC,kBAAkB,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CACxE,CAAA;IACH,CAAC;IAEO,cAAc,CAAE,MAAsB;QAC5C,OAAO,CACL,GAAoB,EACpB,GAAqB,EACrB,IAA0B,EAC1B,EAAE;YACF,IAAI,UAAU,CAAA;YACd,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC5B,UAAU,GAAG,IAAI,CAAC,UAAU,CAAA;aAC7B;iBAAM;gBACL,MAAM,OAAO,GAAG,eAAK,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,EAAE;oBACpE,UAAU,EAAE,CAAC,SAAS,EAAE,wBAAwB,CAAC;iBAClD,CAAC,CAAA;gBACF,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;oBACzC,UAAU,GAAG,OAAO,CAAA;iBACrB;qBAAM,IACL,OAAO,CAAC,SAAS,CAAC;oBAClB,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,IAAI,EAChD;oBACA,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;iBAChC;qBAAM;oBACL,UAAU;wBACR,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;4BAC7B,OAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;iBAC3C;aACF;YACD,MAAM,IAAI,GAAG,IAAI,UAAU,EAAE,CAAA;YAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;YAClD,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QAClB,CAAC,CAAA;IACH,CAAC;CACF;AAnED,gDAmEC","file":"controllerMetadata.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport 'reflect-metadata'\nimport * as express from 'express'\nimport { Metadata } from './metadata'\nimport { ActionMetadata } from './actionMetadata'\nimport { ControllerResolver } from '../controllerResolver'\nimport scope from '@pii/scope'\n\nexport class ControllerMetadata {\n  public path: string\n  public controller: any\n  public controllerResolver?: ControllerResolver\n\n  constructor (controller: any) {\n    if (!controller) {\n      throw new Error('Controller cannot be undefined')\n    }\n    this.controller = controller\n    this.path = Reflect.getMetadata(Metadata.controller_path, this.controller)\n  }\n\n  public resolveWith (file: string) {\n    this.controllerResolver = new ControllerResolver(file)\n  }\n\n  public use (router: express.Router) {\n    let _router = router\n    if (this.path) {\n      _router = express.Router()\n      router.use(this.path, _router)\n    }\n    const actions = this.getActions()\n    actions.forEach(action => {\n      const args = [action.route, this.requestHandler(action)]\n      _router[action.method].apply(_router, args)\n    })\n  }\n\n  private getActions (): ActionMetadata[] {\n    return (\n      Reflect.getMetadata(Metadata.controller_actions, this.controller) || []\n    )\n  }\n\n  private requestHandler (action: ActionMetadata) {\n    return (\n      req: express.Request,\n      res: express.Response,\n      next: express.NextFunction\n    ) => {\n      let Controller\n      if (!this.controllerResolver) {\n        Controller = this.controller\n      } else {\n        const _module = scope.New(this.controllerResolver.controllerFilePath, {\n          noCacheFor: ['@pii/di', '@pii/di/dist/container']\n        })\n        if (_module.name === this.controller.name) {\n          Controller = _module\n        } else if (\n          _module['default'] &&\n          _module['default'].name === this.controller.name\n        ) {\n          Controller = _module['default']\n        } else {\n          Controller =\n            _module[this.controller.name] ||\n            _module['default'][this.controller.name]\n        }\n      }\n      const ctrl = new Controller()\n      const result = ctrl[action.action].apply(ctrl, [])\n      res.json(result)\n    }\n  }\n}\n"]}