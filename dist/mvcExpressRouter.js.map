{"version":3,"sources":["../src/mvcExpressRouter.ts"],"names":[],"mappings":"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","file":"mvcExpressRouter.js","sourcesContent":["/**\n * Copyright 2018-present, CODECO. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport 'reflect-metadata'\nimport * as express from 'express'\nimport * as path from 'path'\nimport { ExpressRouter } from '@pii/server-express'\nimport { Container, Token } from '@pii/di'\nimport { Metadata } from './metadata/metadata'\nimport { ControllerMetadata } from './metadata/controllerMetadata'\n\nexport const ControllerToken = Token('EXPRESS_CONTROLLER_TOKEN')\n\nexport class MVCExpressRouter extends ExpressRouter {\n  private controllers: any[] = []\n  private router: express.Router\n\n  constructor (public path: string = '/') {\n    super()\n    this.router = express.Router()\n    this.router.use(this.requestHandler)\n  }\n\n  public resolveController (file: string) {\n    const filePath = path.isAbsolute(file)\n      ? file\n      : path.resolve(process.cwd(), file)\n    const controllerModule = require(filePath)\n    const isController =\n      (typeof controllerModule === 'object' ||\n        typeof controllerModule === 'function') &&\n      !!(controllerModule.prototype || {}).constructor &&\n      Reflect.hasMetadata(Metadata.controller_name, controllerModule)\n    if (isController) {\n      const meta = Metadata.get(controllerModule)\n      meta.resolveWith(filePath)\n      Container.addSingleton(ControllerToken, meta)\n    } else {\n      try {\n        const controllers = Reflect.ownKeys(controllerModule)\n        controllers.forEach(key => {\n          const controller = controllerModule[key]\n          const isController =\n            (typeof controller === 'object' ||\n              typeof controller === 'function') &&\n            !!controller.prototype.constructor &&\n            Reflect.hasMetadata(Metadata.controller_name, controller)\n          if (isController) {\n            const meta = Metadata.get(controller)\n            meta.resolveWith(filePath)\n            Container.addSingleton(ControllerToken, meta)\n          }\n        })\n      } catch (err) {\n        // does nothing\n      }\n    }\n  }\n\n  public async init (server: express.Express): Promise<void> {\n    if (!server) throw new Error('server cannot be null')\n    this.controllers = Container.getServices(ControllerToken)\n    this.controllers.forEach(controller => {\n      if (controller instanceof ControllerMetadata) {\n        controller.use(this.router)\n      } else {\n        Metadata.get(controller).use(this.router)\n      }\n    })\n    server.use(this.path, this.router)\n  }\n\n  private requestHandler (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) {\n    next && next()\n  }\n}\n"]}